/*                     __                                               *\
**     ________ ___   / /  ___      __ ____  Scala.js API               **
**    / __/ __// _ | / /  / _ | __ / // __/  (c) 2013-2017, LAMP/EPFL   **
**  __\ \/ /__/ __ |/ /__/ __ |/_// /_\ \    http://scala-lang.org/     **
** /____/\___/_/ |_/____/_/ | |__/ /____/                               **
**                          |/____/                                     **
\*                                                                      */

package scala.scalajs.js

/** Contains special primitives of interoperability with JavaScript which are
 *  of limited importance or rare usefulness.
 *
 *  In theory, all of the members of this package could equally well be part of
 *  the `scala.scalajs.js` package. They are sligthly "hidden" in this
 *  `special` package so that they are not used on a daily basis, but only when
 *  absolutely necessary.
 *
 *  Everything in this package is a "I-know-what-I-am-doing" API. Notably, no
 *  attempt is made to guide the user with types that are not hard
 *  requirements.
 */
package object special {

  /** Tests whether an object has a given enumerable property in its prototype
   *  chain.
   *
   *  This method is the exact equivalent of `p in o` in JavaScript.
   *
   *  The recommended surface syntax to perform `p in o` is to use
   *  `js.Object.hasProperty(o, p)`.
   */
  def in(p: scala.Any, o: scala.Any): Boolean =
    throw new java.lang.Error("stub")

  /** Dynamically tests whether a value is an instance of a JavaScript class.
   *
   *  This method is the exact equivalent of `x instanceof clazz` in
   *  JavaScript.
   *
   *  Using this method is only necessary when `clazz` is only known at
   *  run-time. In most cases, you should use
   *  {{{
   *  x.isInstanceOf[C]
   *  }}}
   *  instead, where `C` is the statically defined class corresponding to
   *  `clazz`. In particular, the following identity holds for all `x` and `C`:
   *  {{{
   *  x.isInstanceOf[C] == js.special.instanceof(x, js.constructorOf[C])
   *  }}}
   */
  def instanceof(x: scala.Any, clazz: scala.Any): Boolean =
    throw new java.lang.Error("stub")

  /** Deletes a property of an object.
   *
   *  This method is the exact equivalent of the `delete obj[key]` statement
   *  of JavaScript (and by extension of `delete obj.key` if `key` is a
   *  constant string).
   *
   *  The property must be configurable. Otherwise, this method throws a
   *  [[js.TypeError]].
   *
   *  Rather than using this method, it is often preferable to use a
   *  [[js.Dictionary]] and its `-=` method.
   */
  def delete(obj: scala.Any, key: scala.Any): Unit =
    throw new java.lang.Error("stub")

  /** The value of the global JavaScript `this`.
   *
   *  This returns the value that would be obtained by writing `this` at the
   *  top-level of the JavaScript file generated by Scala.js. In most
   *  JavaScript environments, this is equivalent to the *global object*, but
   *  it is not necessarily the case. For example, on Node.js, `this` is the
   *  object representing the `exports` of the current module.
   *
   *  Using this value should be rare, and mostly limited to writing code
   *  detecting what the global object is. For example, a typical detection
   *  code looks like:
   *  {{{
   *  val globalObject = {
   *    import js.Dynamic.{global => g}
   *    if (js.typeOf(g.global) != "undefined" && (g.global.Object eq g.Object)) {
   *      // Node.js environment detected
   *      g.global
   *    } else {
   *      // In all other well-known environment, we can use the global `this`
   *      js.special.globalThis
   *    }
   *  }
   *  }}}
   *  Note that the above code is not comprehensive, as there can be JavaScript
   *  environments where the global object cannot be fetched neither through
   *  `global` nor `this`. If your code needs to run in such an environment, it
   *  is up to you to use an appropriate detection procedure.
   */
  @inline
  def globalThis: scala.Any =
    scala.scalajs.runtime.linkingInfo.globalThis

  /** Exact equivalent of the `debugger` keyword of JavaScript.
   *
   *  `debugger()` invokes any available debugging functionality.
   *  If no debugging functionality is available, this method has no effect.
   *
   *  MDN
   *
   *  Browser support:
   *  - Has no effect in Rhino nor, apparently, in Firefox
   *  - In Chrome, it has no effect unless the developer tools are opened
   *    beforehand.
   */
  def debugger(): Unit =
    throw new java.lang.Error("stub")

}
